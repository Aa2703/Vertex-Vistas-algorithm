# -*- coding: utf-8 -*-
"""vertx vista.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aAa7y0uWPhZWQZW0_lMoEVFCQQRpfam6
"""

pip install networkx matplotlib

import networkx as nx
import itertools
import matplotlib.pyplot as plt

def is_independent_set(G, node_set):
    """Check if a given set of nodes is an independent set in graph G."""
    for node in node_set:
        for neighbor in G.neighbors(node):
            if neighbor in node_set:
                return False
    return True

def brute_force_maximal_independent_set(G):
    """Find a maximal independent set using a brute force approach."""
    nodes = G.nodes()
    for size in range(len(nodes), 0, -1):
        for subset in itertools.combinations(nodes, size):
            if is_independent_set(G, subset):
                return set(subset)
    return set()

def greedy_maximal_independent_set(G):
    """Find a maximal independent set using a greedy approach."""
    remaining_nodes = set(G.nodes())
    independent_set = set()

    while remaining_nodes:
        node = remaining_nodes.pop()
        if all(neighbor not in independent_set for neighbor in G.neighbors(node)):
            independent_set.add(node)
        remaining_nodes -= set(G.neighbors(node))

    return independent_set

# Create a sample graph for demonstration
G = nx.erdos_renyi_graph(10, 0.3)
pos = nx.spring_layout(G)
nx.draw(G, pos, with_labels=True)

# Test both approaches
brute_force_set = brute_force_maximal_independent_set(G)
greedy_set = greedy_maximal_independent_set(G)
print(f"Brute Force Maximal Independent Set: {brute_force_set}")
print(f"Greedy Maximal Independent Set: {greedy_set}")

plt.show()